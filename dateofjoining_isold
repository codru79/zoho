list dateofjoining_isold()
{
searchMap1 = Map();
searchMap1.put("searchField","Dateofexit");
searchMap1.put("searchOperator","Before");
searchMap1.put("searchText",zoho.currentdate.toStartOfMonth());
searchMap2 = Map();
searchMap2.put("searchField","Employeestatus");
searchMap2.put("searchOperator","Like");
searchMap2.put("searchText","Active");
searchMap2.put("searchCriteria","AND");
searchMap3 = Map();
searchMap3.put("searchField","Notes");
searchMap3.put("searchOperator","Like");
searchMap3.put("searchText","DateOfExitIsInCurrentMonth");
searchMap3.put("searchCriteria","AND");
searchList = List();
searchList.add(searchMap1);
searchList.add(searchMap2);
searchList.add(searchMap3);
//Execute the get records task to fetch the search result 
response = zoho.people.getRecords("P_Employee",0,20,searchList);
zdeskusersdisabled = list();
for each  var in response
{
	zpuserid = var.get("Zoho_ID");
	emailid = var.get("EmailID");
	param_map = Map();
	param_map.put("Notes","Inactive");
	param_map.put("Employeestatus","Terminated");
	param_map.put("recordid",zpuserid);
	//Execute the Zoho People integration task to update the user nots section with text Inactive
	//response1 = zoho.people.update("P_Employee",param_map);
	//Execute Zoho Desk integration to disable users
	searchusers = invokeurl
	[
		url :"https://desk.zoho.com/api/v1/users?emailAddress=" + emailid
		type :GET
		connection:"zoho_desk"
	];
	var1 = searchusers.getJson("data").size();
	if(var1 > 0)
	{
		zduser_id = searchusers.getJson("data").get(0).get("id");
		jsonString2 = {"status":"DISABLED"};
		setusertodisabled = invokeurl
		[
			url :"https://desk.zoho.com/api/v1/users/" + zduser_id
			type :PATCH
			parameters:jsonString2 + ""
			connection:"zoho_desk"
		];
		var2 = setusertodisabled.getJson("status").size();
		if(var2 > 0)
		{
			isdisabled = setusertodisabled.getJson("status");
			if(isdisabled == "DISABLED")
			{
				zdeskusersdisabled.add(emailid);
			}
		}
	}
}
return zdeskusersdisabled;
}
